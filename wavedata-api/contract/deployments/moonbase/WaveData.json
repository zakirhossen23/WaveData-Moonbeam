{
  "address": "0x87bB8EC17E1B96c40E27eFa1aBa084263c1287f5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "CheckEmail",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "full_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "CreateAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        }
      ],
      "name": "CreateCompletedSurveys",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "name": "CreateOngoingTrail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "CreateOrSaveSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "section_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "question_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answer",
          "type": "string"
        }
      ],
      "name": "CreateQuestionAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "CreateSurvey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "CreateSurveyCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contributors",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "audience",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "name": "CreateTrial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "GetOngoingTrial",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "Login",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "audience_info",
          "type": "string"
        }
      ],
      "name": "UpdateAudience",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "given_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "patient_id",
          "type": "string"
        }
      ],
      "name": "UpdateFhir",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "privatekey",
          "type": "string"
        }
      ],
      "name": "UpdatePrivatekey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reward_type",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total_spending_limit",
          "type": "uint256"
        }
      ],
      "name": "UpdateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "UpdateSurvey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        }
      ],
      "name": "UpdateTrial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "credits",
          "type": "uint256"
        }
      ],
      "name": "UpdateUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_AnsweredIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_CompletedSurveyIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_OngoingIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_SurveyCategoryIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_SurveyIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_TrialIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_UserIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_categoryMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_completedsurveyMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "completed_survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_fhirMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "given_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "patient_id",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ongoingMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ongoing_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_questionanswerdMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "answer_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "section_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "question_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answer",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_sectionsMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_surveyMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "submission",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_trialAudienceMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_trialMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contributors",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "audience",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "reward_type",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total_spending_limit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "getAllCompletedSurveysIDByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        }
      ],
      "name": "getAllSurveysIDByTrial",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "getUserDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8df39c1228f54910c7c63570613b8dc8a9bea4b9ca76c132847332629a91abf7",
  "receipt": {
    "to": null,
    "from": "0x32F48d18db5A63D3345Eaee9d9C326a2cC647B80",
    "contractAddress": "0x87bB8EC17E1B96c40E27eFa1aBa084263c1287f5",
    "transactionIndex": 0,
    "gasUsed": "3642387",
    "logsBloom": "0x
    "blockHash": "0xa330629ed70883d40bb930822f47db7fe9d7d7341987baa868e9c17a00b7dd9d",
    "transactionHash": "0x8df39c1228f54910c7c63570613b8dc8a9bea4b9ca76c132847332629a91abf7",
    "logs": [],
    "blockNumber": 3361730,
    "cumulativeGasUsed": "3642387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "73a2a4c9c6705e7866cf8e41171ff029",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"CheckEmail\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"full_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"CreateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"}],\"name\":\"CreateCompletedSurveys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"name\":\"CreateOngoingTrail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"CreateOrSaveSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"section_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"question_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"name\":\"CreateQuestionAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CreateSurvey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"CreateSurveyCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contributors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"audience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"name\":\"CreateTrial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"GetOngoingTrial\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"Login\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"audience_info\",\"type\":\"string\"}],\"name\":\"UpdateAudience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"given_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patient_id\",\"type\":\"string\"}],\"name\":\"UpdateFhir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"privatekey\",\"type\":\"string\"}],\"name\":\"UpdatePrivatekey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reward_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_spending_limit\",\"type\":\"uint256\"}],\"name\":\"UpdateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"UpdateSurvey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"}],\"name\":\"UpdateTrial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"}],\"name\":\"UpdateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_AnsweredIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CompletedSurveyIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OngoingIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SurveyCategoryIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SurveyIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TrialIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UserIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_categoryMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_completedsurveyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"completed_survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_fhirMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"given_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patient_id\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ongoingMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ongoing_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_questionanswerdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"answer_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"section_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"question_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sectionsMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_surveyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submission\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_trialAudienceMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_trialMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contributors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"audience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reward_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_spending_limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"getAllCompletedSurveysIDByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"}],\"name\":\"getAllSurveysIDByTrial\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_categoryMap(uint256)\":{\"notice\":\"The map of all the Survey Category .\"},\"_completedsurveyMap(uint256)\":{\"notice\":\"The map of all the Completed Surveys.\"},\"_fhirMap(uint256)\":{\"notice\":\"The map of all the FHIR information.\"},\"_ongoingMap(uint256)\":{\"notice\":\"The map of all the OnGoing Trials.\"},\"_questionanswerdMap(uint256)\":{\"notice\":\"The map of all the Question Answerd in a Survey.\"},\"_sectionsMap(uint256)\":{\"notice\":\"The map of all the Survey Sections  .\"},\"_surveyMap(uint256)\":{\"notice\":\"The map of all the Surveys information.\"},\"_trialAudienceMap(uint256)\":{\"notice\":\"The map of all the Rewards information.\"},\"_trialMap(uint256)\":{\"notice\":\"The map of all the Trials information.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WaveData.sol\":\"WaveData\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/WaveData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract WaveData {\\r\\n    /// User contains all the login information\\r\\n    struct user_struct {\\r\\n        /// The ID of the User ID.\\r\\n        uint256 user_id;\\r\\n        ///Full Name of user\\r\\n        string name;\\r\\n        ///Email of user\\r\\n        string email;\\r\\n        ///Password of user\\r\\n        string password;\\r\\n        ///Address of Wallet\\r\\n        address walletaddress;\\r\\n        ///Privatekey of user\\r\\n        string privatekey;\\r\\n        /// The User Image\\r\\n        string image;\\r\\n        /// The User Credits\\r\\n        uint256 credits;\\r\\n    }\\r\\n\\r\\n    /// Survy Category Struct contains all the Category information\\r\\n    struct survey_category_struct {\\r\\n        ///Name of Category\\r\\n        string name;\\r\\n        ///Image Link of Category\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    /// Trial Struct contains all the trial information\\r\\n    struct trial_struct {\\r\\n        /// The ID of the Trial ID.\\r\\n        uint256 trial_id;\\r\\n        /// The ID of the User ID.\\r\\n        uint256 user_id;\\r\\n        /// The Image of the Trial\\r\\n        string image;\\r\\n        /// The Title of the Trial\\r\\n        string title;\\r\\n        /// The Description of the Trial\\r\\n        string description;\\r\\n        /// The Contributors of the Trial\\r\\n        uint256 contributors;\\r\\n        /// The Audience of the Trial\\r\\n        uint256 audience;\\r\\n        /// The Budget of the Trial\\r\\n        uint256 budget;\\r\\n        /// The Date of the Trial\\r\\n        string date;\\r\\n         /// The Type of the Reward.\\r\\n        string reward_type;\\r\\n        /// The Price of the Reward.\\r\\n        uint256 reward_price;\\r\\n        /// The Total Spending Limit of the Trial.\\r\\n        uint256 total_spending_limit;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// Survey Struct contains all the survey information\\r\\n    struct survey_struct {\\r\\n        /// The ID of the Survey ID.\\r\\n        uint256 survey_id;\\r\\n        /// The ID of the Trial ID.\\r\\n        uint256 trial_id;\\r\\n        /// The ID of the User ID.\\r\\n        uint256 user_id;\\r\\n        /// The Name of the Survey\\r\\n        string name;\\r\\n        /// The Description of the Survey\\r\\n        string description;\\r\\n        /// The Date of the Survey\\r\\n        string date;\\r\\n        /// The Image of the Survey\\r\\n        string image;\\r\\n        /// The Reward of the Survey\\r\\n        uint256 reward;\\r\\n        /// The Submission of the Survey\\r\\n        uint256 submission;\\r\\n    }\\r\\n\\r\\n    /// FHIR user information\\r\\n    struct fhir_struct {\\r\\n        /// User ID of the user\\r\\n        uint256 user_id;\\r\\n        /// Given Name in FHIR\\r\\n        string given_name;\\r\\n        /// Identifier of the user FHIR\\r\\n        string identifier;\\r\\n        /// The Patient ID of the user FHIR\\r\\n        string patient_id;\\r\\n    }\\r\\n\\r\\n    /// OnGoing Trial\\r\\n    struct ongoing_struct {\\r\\n        uint256 ongoing_id;\\r\\n        uint256 trial_id;\\r\\n        uint256 user_id;\\r\\n        string date;\\r\\n    }\\r\\n\\r\\n    /// Question Answers of Survey\\r\\n    struct survey_question_answer_struct {\\r\\n        uint256 answer_id;\\r\\n        uint256 trial_id;\\r\\n        uint256 user_id;\\r\\n        uint256 survey_id;\\r\\n        uint256 section_id;\\r\\n        uint256 question_id;\\r\\n        string answer;\\r\\n    }\\r\\n\\r\\n    /// Completed Survey Trial\\r\\n    struct completed_survey_struct {\\r\\n        uint256 completed_survey_id;\\r\\n        uint256 trial_id;\\r\\n        uint256 user_id;\\r\\n        uint256 survey_id;\\r\\n        string date;\\r\\n    }\\r\\n\\r\\n    uint256 public _UserIds;\\r\\n    uint256 public _TrialIds;\\r\\n    uint256 public _SurveyIds;\\r\\n    uint256 public _SurveyCategoryIds;\\r\\n\\r\\n    uint256 public _OngoingIds;\\r\\n    uint256 public _AnsweredIds;\\r\\n    uint256 public _CompletedSurveyIds;\\r\\n\\r\\n    /// The map of all the Users login information.\\r\\n    mapping(uint256 => user_struct) private _userMap;\\r\\n    /// The map of all the Trials information.\\r\\n    mapping(uint256 => trial_struct) public _trialMap;\\r\\n    /// The map of all the Rewards information.\\r\\n    mapping(uint256 => string) public _trialAudienceMap; //trial id => Audience JSON\\r\\n    /// The map of all the Surveys information.\\r\\n    mapping(uint256 => survey_struct) public _surveyMap;\\r\\n    /// The map of all the Survey Category .\\r\\n    mapping(uint256 => survey_category_struct) public _categoryMap;\\r\\n    /// The map of all the Survey Sections  .\\r\\n    mapping(uint256 => string) public _sectionsMap; //Survey id => All sections\\r\\n\\r\\n    /// The map of all the FHIR information.\\r\\n    mapping(uint256 => fhir_struct) public _fhirMap; //User id => user FHIR\\r\\n    /// The map of all the OnGoing Trials.\\r\\n    mapping(uint256 => ongoing_struct) public _ongoingMap;\\r\\n    /// The map of all the Question Answerd in a Survey.\\r\\n    mapping(uint256 => survey_question_answer_struct)\\r\\n        public _questionanswerdMap;\\r\\n    /// The map of all the Completed Surveys.\\r\\n    mapping(uint256 => completed_survey_struct) public _completedsurveyMap;\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    //Login User\\r\\n    function CheckEmail(string memory email)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        ///Getting the found account\\r\\n        for (uint256 i = 0; i < _UserIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_userMap[i].email)) == keccak256(bytes(email))\\r\\n            ) {\\r\\n                ///Returning user id\\r\\n                return Strings.toString(i);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ///Returning False if not found user\\r\\n        return \\\"False\\\";\\r\\n    }\\r\\n\\r\\n    //CreateAccount\\r\\n    function CreateAccount(\\r\\n        string memory full_name,\\r\\n        string memory email,\\r\\n        string memory password\\r\\n    ) public {\\r\\n        // Store the metadata of user in the map.\\r\\n        _userMap[_UserIds] = user_struct({\\r\\n            user_id: _UserIds,\\r\\n            name: full_name,\\r\\n            email: email,\\r\\n            password: password,\\r\\n            privatekey: \\\"\\\",\\r\\n            walletaddress: msg.sender,\\r\\n            image: \\\"https://i.postimg.cc/SsxGw5cZ/person.jpg\\\",\\r\\n            credits: 0\\r\\n        });\\r\\n        _UserIds++;\\r\\n    }\\r\\n\\r\\n    //Update Privatekey\\r\\n    function UpdatePrivatekey(uint256 userid, string memory privatekey) public {\\r\\n        //require(msg.sender ==  _userMap[userid].walletaddress, \\\"Only owner of this user account can change PrivateKey\\\");\\r\\n        _userMap[userid].privatekey = privatekey;\\r\\n    }\\r\\n\\r\\n    //Login User\\r\\n    function Login(string memory email, string memory password)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        ///Getting the found account\\r\\n        for (uint256 i = 0; i < _UserIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_userMap[i].email)) ==\\r\\n                keccak256(bytes(email)) &&\\r\\n                keccak256(bytes(_userMap[i].password)) ==\\r\\n                keccak256(bytes(password))\\r\\n            ) {\\r\\n                ///Returning user id\\r\\n                return Strings.toString(i);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ///Returning False if not found user\\r\\n        return \\\"False\\\";\\r\\n    }\\r\\n\\r\\n    //Create Trial\\r\\n    function CreateTrial(\\r\\n        uint256 user_id,\\r\\n        string memory image,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint256 contributors,\\r\\n        uint256 audience,\\r\\n        uint256 budget,\\r\\n        string memory date\\r\\n    ) public {\\r\\n        // Store the metadata of Trial in the map.\\r\\n        _trialMap[_TrialIds] = trial_struct({\\r\\n            trial_id: _TrialIds,\\r\\n            user_id: user_id,\\r\\n            image: image,\\r\\n            title: title,\\r\\n            description: description,\\r\\n            contributors: contributors,\\r\\n            audience: audience,\\r\\n            budget: budget,\\r\\n            date: date,\\r\\n            reward_type: \\\"DEV\\\",\\r\\n            reward_price: 0,\\r\\n            total_spending_limit: budget\\r\\n        });\\r\\n\\r\\n        _TrialIds++;\\r\\n    }\\r\\n\\r\\n    //Create Survey\\r\\n    function CreateSurvey(\\r\\n        uint256 trial_id,\\r\\n        uint256 user_id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory date,\\r\\n        string memory image,\\r\\n        uint256 reward\\r\\n    ) public {\\r\\n        // Store the metadata of Survey in the map.\\r\\n        _surveyMap[_SurveyIds] = survey_struct({\\r\\n            survey_id: _SurveyIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            name: name,\\r\\n            description: description,\\r\\n            date: date,\\r\\n            image: image,\\r\\n            reward: reward,\\r\\n            submission: 0\\r\\n        });\\r\\n        _SurveyIds++;\\r\\n    }\\r\\n\\r\\n    //Create or Save Sections\\r\\n    function CreateOrSaveSections(uint256 survey_id, string memory metadata)\\r\\n        public\\r\\n    {\\r\\n        // Store the metadata of all Sections in the map.\\r\\n        _sectionsMap[survey_id] = metadata;\\r\\n    }\\r\\n\\r\\n    //Create Survey Category\\r\\n    function CreateSurveyCategory(string memory name, string memory image)\\r\\n        public\\r\\n    {\\r\\n        // Store the metadata of Survey Category in the map.\\r\\n        _categoryMap[_SurveyCategoryIds] = survey_category_struct({\\r\\n            name: name,\\r\\n            image: image\\r\\n        });\\r\\n        _SurveyCategoryIds++;\\r\\n    }\\r\\n\\r\\n    //Get All Survey by Trial ID\\r\\n    function getAllSurveysIDByTrial(uint256 trial_id)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 _TemporarySearch = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _SurveyIds; i++) {\\r\\n            if (_surveyMap[i].trial_id == trial_id) {\\r\\n                _TemporarySearch++;\\r\\n            }\\r\\n        }\\r\\n        uint256[] memory _SearchedStore = new uint256[](_TemporarySearch);\\r\\n\\r\\n        uint256 _SearchIds2 = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _SurveyIds; i++) {\\r\\n            if (_surveyMap[i].trial_id == trial_id) {\\r\\n                _SearchedStore[_SearchIds2] = i;\\r\\n                _SearchIds2++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStore;\\r\\n    }\\r\\n\\r\\n    //Get UserDetails by userid\\r\\n    function getUserDetails(uint256 user_id)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory,\\r\\n            uint256,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            string memory\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _userMap[user_id].image,\\r\\n            _userMap[user_id].credits,\\r\\n            _userMap[user_id].name,\\r\\n            _userMap[user_id].email,\\r\\n            substring(_userMap[user_id].privatekey,0,10)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Update Trial\\r\\n    function UpdateTrial(\\r\\n        uint256 trial_id,\\r\\n        string memory image,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint256 budget\\r\\n    ) public {\\r\\n        // Update the metadata of Trial in the map.\\r\\n        _trialMap[trial_id].image = image;\\r\\n        _trialMap[trial_id].title = title;\\r\\n        _trialMap[trial_id].description = description;\\r\\n        _trialMap[trial_id].budget = budget;\\r\\n    }\\r\\n\\r\\n    //Update Survey\\r\\n    function UpdateSurvey(\\r\\n        uint256 survey_id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory image,\\r\\n        uint256 reward\\r\\n    ) public {\\r\\n        // Update the metadata of Survey in the map.\\r\\n        _surveyMap[survey_id].name = name;\\r\\n        _surveyMap[survey_id].description = description;\\r\\n        _surveyMap[survey_id].image = image;\\r\\n        _surveyMap[survey_id].reward = reward;\\r\\n    }\\r\\n\\r\\n    //Update Reward\\r\\n    function UpdateReward(\\r\\n        uint256 trial_id,\\r\\n        string memory reward_type,\\r\\n        uint256 reward_price,\\r\\n        uint256 total_spending_limit\\r\\n    ) public {\\r\\n        // Update the metadata of Trial in the map.\\r\\n        _trialMap[trial_id].reward_type = reward_type;\\r\\n        _trialMap[trial_id].reward_price = reward_price;\\r\\n        _trialMap[trial_id].total_spending_limit = total_spending_limit;\\r\\n    }\\r\\n\\r\\n    //Update Audience\\r\\n    function UpdateAudience(uint256 trial_id, string memory audience_info)\\r\\n        public\\r\\n    {\\r\\n        // Update the metadata of Audience in the map.\\r\\n        _trialAudienceMap[trial_id] = audience_info;\\r\\n    }\\r\\n\\r\\n    //Update User\\r\\n    function UpdateUser(\\r\\n        uint256 user_id,\\r\\n        string memory image,\\r\\n        uint256 credits\\r\\n    ) public {\\r\\n        // Update the metadata of User in the map\\r\\n        _userMap[user_id].image = image;\\r\\n        _userMap[user_id].credits = credits;\\r\\n    }\\r\\n\\r\\n    //Update FHIR\\r\\n    function UpdateFhir(\\r\\n        uint256 user_id,\\r\\n        string memory given_name,\\r\\n        string memory identifier,\\r\\n        string memory patient_id\\r\\n    ) public {\\r\\n        // Update the metadata of FHIR in the map.\\r\\n        _fhirMap[user_id].user_id = user_id;\\r\\n        _fhirMap[user_id].given_name = given_name;\\r\\n        _fhirMap[user_id].identifier = identifier;\\r\\n        _fhirMap[user_id].patient_id = patient_id;\\r\\n    }\\r\\n\\r\\n    function CreateOngoingTrail(\\r\\n        uint256 trial_id,\\r\\n        uint256 user_id,\\r\\n        string memory date\\r\\n    ) public {\\r\\n        // Store the metadata of Ongoing Trial in the map.\\r\\n        _ongoingMap[_OngoingIds] = ongoing_struct({\\r\\n            ongoing_id: _OngoingIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            date: date\\r\\n        });\\r\\n        _trialMap[trial_id].contributors += 1;\\r\\n        _OngoingIds++;\\r\\n    }\\r\\n\\r\\n    function GetOngoingTrial(uint256 user_id)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        ///Getting the found Ongoing Trial\\r\\n        for (uint256 i = 0; i < _OngoingIds; i++) {\\r\\n            if (_ongoingMap[i].user_id == user_id) {\\r\\n                ///Returning Trial id\\r\\n                return Strings.toString(_ongoingMap[i].trial_id);\\r\\n            }\\r\\n        }\\r\\n        ///Returning False if not found\\r\\n        return \\\"False\\\";\\r\\n    }\\r\\n\\r\\n    //     function GetQuestionAnswers(uint256 trial_id,uint256 survey_id,uint256 question_id) public view returns (string memory ){\\r\\n    //         ///Getting the found Ongoing Trial\\r\\n    // \\t\\tfor (uint256 i = 0; i < _OngoingIds; i++) {\\r\\n    // \\t\\t    if (_ongoingMap[i].user_id == user_id) {\\r\\n    // \\t\\t\\t    ///Returning Trial id\\r\\n    // \\t\\t\\t\\treturn Strings.toString(_ongoingMap[i].trial_id);\\r\\n    // \\t\\t\\t}\\r\\n    // \\t\\t}\\r\\n    //         ///Returning False if not found\\r\\n    // \\t\\treturn \\\"False\\\";\\r\\n    //     }\\r\\n    function CreateQuestionAnswer(\\r\\n        uint256 trial_id,\\r\\n        uint256 user_id,\\r\\n        uint256 survey_id,\\r\\n        uint256 section_id,\\r\\n        uint256 question_id,\\r\\n        string memory answer\\r\\n    ) public {\\r\\n        // Store the metadata of Question Answered in the map.\\r\\n        _questionanswerdMap[_AnsweredIds] = survey_question_answer_struct({\\r\\n            answer_id: _AnsweredIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            survey_id: survey_id,\\r\\n            section_id: section_id,\\r\\n            question_id: question_id,\\r\\n            answer: answer\\r\\n        });\\r\\n        _AnsweredIds++;\\r\\n    }\\r\\n\\r\\n    function CreateCompletedSurveys(\\r\\n        uint256 survey_id,\\r\\n        uint256 user_id,\\r\\n        string memory date,\\r\\n        uint256 trial_id\\r\\n    ) public {\\r\\n        // Store the metadata of Completed Survyes in the map.\\r\\n        _completedsurveyMap[_CompletedSurveyIds] = completed_survey_struct({\\r\\n            completed_survey_id: _CompletedSurveyIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            survey_id: survey_id,\\r\\n            date: date\\r\\n        });\\r\\n        _surveyMap[survey_id].submission += 1;\\r\\n        _surveyMap[survey_id].date = date;\\r\\n        _CompletedSurveyIds++;\\r\\n    }\\r\\n\\r\\n    function getAllCompletedSurveysIDByUser(uint256 user_id)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 _TemporarySearch = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++) {\\r\\n            if (_completedsurveyMap[i].user_id == user_id) {\\r\\n                _TemporarySearch++;\\r\\n            }\\r\\n        }\\r\\n        uint256[] memory _SearchedStore = new uint256[](_TemporarySearch);\\r\\n\\r\\n        uint256 _SearchIds2 = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++) {\\r\\n            if (_completedsurveyMap[i].user_id == user_id) {\\r\\n                _SearchedStore[_SearchIds2] = i;\\r\\n                _SearchIds2++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStore;\\r\\n    }\\r\\n\\r\\n    function reset_all() public {\\r\\n        for (uint256 i = 0; i < _UserIds; i++) delete _userMap[i];\\r\\n        for (uint256 i = 0; i < _TrialIds; i++) delete _trialMap[i];\\r\\n        for (uint256 i = 0; i < _TrialIds; i++) delete _trialAudienceMap[i];\\r\\n        for (uint256 i = 0; i < _SurveyIds; i++) delete _surveyMap[i];\\r\\n        for (uint256 i = 0; i < _SurveyCategoryIds; i++) delete _categoryMap[i];\\r\\n        for (uint256 i = 0; i < _TrialIds; i++) delete _sectionsMap[i];\\r\\n        for (uint256 i = 0; i < _UserIds; i++) delete _fhirMap[i];\\r\\n        for (uint256 i = 0; i < _OngoingIds; i++) delete _ongoingMap[i];\\r\\n        for (uint256 i = 0; i < _AnsweredIds; i++)\\r\\n            delete _questionanswerdMap[i];\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++)\\r\\n            delete _completedsurveyMap[i];\\r\\n        _UserIds = 0;\\r\\n        _TrialIds = 0;\\r\\n        _SurveyIds = 0;\\r\\n        _SurveyCategoryIds = 0;\\r\\n        _OngoingIds = 0;\\r\\n        _AnsweredIds = 0;\\r\\n        _CompletedSurveyIds = 0;\\r\\n    }\\r\\n\\r\\n    function substring(string memory str,uint256 startIndex,uint256 endIndex) private pure returns (string memory) {\\r\\n        bytes memory strBytes = bytes(str);\\r\\n        bytes memory result = new bytes(endIndex - startIndex);\\r\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\r\\n            result[i - startIndex] = strBytes[i];\\r\\n        }\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaf37bf5b9b10102d1387cbacb1f1aeefe1763b9ea6661e0de2b82f9c9f87cc3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614103806100206000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806390d6cf051161013b578063ce08988c116100b8578063eb6b28701161007c578063eb6b2870146106f3578063ebe197ca14610711578063f0d8e87314610744578063f6aaa80414610775578063f8b7800f146107a85761023d565b8063ce08988c14610635578063de7acfd714610653578063e1da993f1461068b578063e57f973f146106a7578063ea7efaa6146106c35761023d565b8063b16060a6116100ff578063b16060a61461056c578063b6e604bd14610576578063bed208fe14610594578063c13b2836146105cf578063ccef4218146106055761023d565b806390d6cf05146104c6578063a5f3fc7d146104fa578063a92e1c4c14610516578063ac7aef0e14610532578063ad23f8f9146105505761023d565b806345948fde116101c957806366cad7341161018d57806366cad73414610410578063682d562b1461042c5780637d423e101461045c5780638da5cb5b14610478578063902841d4146104965761023d565b806345948fde1461037057806349b9b07b1461038c5780634f8b36eb146103bc57806355391705146103d85780635f27aea1146103f45761023d565b80632a8caf4a116102105780632a8caf4a146102d05780632c02dd60146103005780632ffb08f71461031c5780633896f130146103385780633eebd0d0146103545761023d565b806301c66109146102425780631429f775146102605780631c1a9f7b1461027e57806329b36423146102b2575b600080fd5b61024a6107d8565b60405161025791906139e8565b60405180910390f35b6102686107de565b60405161027591906139e8565b60405180910390f35b61029860048036038101906102939190613099565b6107e4565b6040516102a9959493929190613979565b60405180910390f35b6102ba610aa8565b6040516102c791906139e8565b60405180910390f35b6102ea60048036038101906102e59190613099565b610aae565b6040516102f79190613920565b60405180910390f35b61031a600480360381019061031591906132ac565b610b4e565b005b610336600480360381019061033191906136c8565b610ced565b005b610352600480360381019061034d9190613533565b610db3565b005b61036e60048036038101906103699190613441565b610ed6565b005b61038a60048036038101906103859190612ff2565b610f3d565b005b6103a660048036038101906103a19190613099565b6110d6565b6040516103b391906138fe565b60405180910390f35b6103d660048036038101906103d19190612f7a565b6111ee565b005b6103f260048036038101906103ed91906131dd565b611271565b005b61040e600480360381019061040991906131dd565b611314565b005b61042a600480360381019061042591906130c6565b6113b7565b005b61044660048036038101906104419190613099565b6113e3565b60405161045391906138fe565b60405180910390f35b61047660048036038101906104719190613645565b6114fb565b005b6104806115f8565b60405161048d91906138e3565b60405180910390f35b6104b060048036038101906104ab9190613099565b61161e565b6040516104bd9190613920565b60405180910390f35b6104e060048036038101906104db9190613099565b6116c4565b6040516104f1959493929190613c2f565b60405180910390f35b610514600480360381019061050f91906134c4565b611782565b005b610530600480360381019061052b9190613122565b611843565b005b61053a6118e5565b60405161054791906139e8565b60405180910390f35b61056a600480360381019061056591906130c6565b6118eb565b005b610574611917565b005b61057e611def565b60405161058b91906139e8565b60405180910390f35b6105ae60048036038101906105a99190613099565b611df5565b6040516105c69c9b9a99989796959493929190613a5d565b60405180910390f35b6105e960048036038101906105e49190613099565b6120fd565b6040516105fc9796959493929190613c89565b60405180910390f35b61061f600480360381019061061a9190612f7a565b6121c7565b60405161062c9190613920565b60405180910390f35b61063d6122af565b60405161064a91906139e8565b60405180910390f35b61066d60048036038101906106689190613099565b6122b5565b60405161068299989796959493929190613b86565b60405180910390f35b6106a560048036038101906106a091906130c6565b612523565b005b6106c160048036038101906106bc91906133d2565b612552565b005b6106dd60048036038101906106d89190613099565b61259d565b6040516106ea9190613920565b60405180910390f35b6106fb61263d565b60405161070891906139e8565b60405180910390f35b61072b60048036038101906107269190613099565b612643565b60405161073b9493929190613a03565b60405180910390f35b61075e60048036038101906107599190613099565b61280b565b60405161076c929190613942565b60405180910390f35b61078f600480360381019061078a9190613099565b61293f565b60405161079f9493929190613b3a565b60405180910390f35b6107c260048036038101906107bd9190612f31565b6129f7565b6040516107cf9190613920565b60405180910390f35b60055481565b60025481565b60606000606080606060076000878152602001908152602001600020600601600760008881526020019081526020016000206007015460076000898152602001908152602001600020600101600760008a81526020019081526020016000206002016108f1600760008c8152602001908152602001600020600501805461086a90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461089690613ed2565b80156108e35780601f106108b8576101008083540402835291602001916108e3565b820191906000526020600020905b8154815290600101906020018083116108c657829003601f168201915b50505050506000600a612aa2565b8480546108fd90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461092990613ed2565b80156109765780601f1061094b57610100808354040283529160200191610976565b820191906000526020600020905b81548152906001019060200180831161095957829003601f168201915b5050505050945082805461098990613ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546109b590613ed2565b8015610a025780601f106109d757610100808354040283529160200191610a02565b820191906000526020600020905b8154815290600101906020018083116109e557829003601f168201915b50505050509250818054610a1590613ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4190613ed2565b8015610a8e5780601f10610a6357610100808354040283529160200191610a8e565b820191906000526020600020905b815481529060010190602001808311610a7157829003601f168201915b505050505091509450945094509450945091939590929450565b60035481565b60096020528060005260406000206000915090508054610acd90613ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054610af990613ed2565b8015610b465780601f10610b1b57610100808354040283529160200191610b46565b820191906000526020600020905b815481529060010190602001808311610b2957829003601f168201915b505050505081565b60405180610180016040528060015481526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020016040518060400160405280600381526020017f44455600000000000000000000000000000000000000000000000000000000008152508152602001600081526020018381525060086000600154815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190610c1d929190612dc9565b506060820151816003019080519060200190610c3a929190612dc9565b506080820151816004019080519060200190610c57929190612dc9565b5060a0820151816005015560c0820151816006015560e08201518160070155610100820151816008019080519060200190610c93929190612dc9565b50610120820151816009019080519060200190610cb1929190612dc9565b5061014082015181600a015561016082015181600b015590505060016000815480929190610cde90613f35565b91905055505050505050505050565b6040518060e00160405280600554815260200187815260200186815260200185815260200184815260200183815260200182815250600f60006005548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006019080519060200190610d8f929190612dc9565b5090505060056000815480929190610da690613f35565b9190505550505050505050565b60405180610120016040528060025481526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020016000815250600a600060025481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019080519060200190610e45929190612dc9565b506080820151816004019080519060200190610e62929190612dc9565b5060a0820151816005019080519060200190610e7f929190612dc9565b5060c0820151816006019080519060200190610e9c929190612dc9565b5060e08201518160070155610100820151816008015590505060026000815480929190610ec890613f35565b919050555050505050505050565b82600860008681526020019081526020016000206009019080519060200190610f00929190612dc9565b508160086000868152602001908152602001600020600a01819055508060086000868152602001908152602001600020600b018190555050505050565b60405180610100016040528060005481526020018481526020018381526020018281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016040518060200160405280600081525081526020016040518060600160405280602881526020016140a660289139815260200160008152506007600080548152602001908152602001600020600082015181600001556020820151816001019080519060200190610ff1929190612dc9565b50604082015181600201908051906020019061100e929190612dc9565b50606082015181600301908051906020019061102b929190612dc9565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600501908051906020019061108f929190612dc9565b5060c08201518160060190805190602001906110ac929190612dc9565b5060e082015181600701559050506000808154809291906110cc90613f35565b9190505550505050565b60606000805b60065481101561112657836010600083815260200190815260200160002060020154141561111357818061110f90613f35565b9250505b808061111e90613f35565b9150506110dc565b5060008167ffffffffffffffff8111156111435761114261403a565b5b6040519080825280602002602001820160405280156111715781602001602082028036833780820191505090505b5090506000805b6006548110156111e25785601060008381526020019081526020016000206002015414156111cf57808383815181106111b4576111b361400b565b5b60200260200101818152505081806111cb90613f35565b9250505b80806111da90613f35565b915050611178565b50819350505050919050565b604051806040016040528083815260200182815250600b600060035481526020019081526020016000206000820151816000019080519060200190611234929190612dc9565b506020820151816001019080519060200190611251929190612dc9565b509050506003600081548092919061126890613f35565b91905055505050565b8360086000878152602001908152602001600020600201908051906020019061129b929190612dc9565b50826008600087815260200190815260200160002060030190805190602001906112c6929190612dc9565b50816008600087815260200190815260200160002060040190805190602001906112f1929190612dc9565b508060086000878152602001908152602001600020600701819055505050505050565b83600a6000878152602001908152602001600020600301908051906020019061133e929190612dc9565b5082600a60008781526020019081526020016000206004019080519060200190611369929190612dc9565b5081600a60008781526020019081526020016000206006019080519060200190611394929190612dc9565b5080600a6000878152602001908152602001600020600701819055505050505050565b80600c600084815260200190815260200160002090805190602001906113de929190612dc9565b505050565b60606000805b6002548110156114335783600a600083815260200190815260200160002060010154141561142057818061141c90613f35565b9250505b808061142b90613f35565b9150506113e9565b5060008167ffffffffffffffff8111156114505761144f61403a565b5b60405190808252806020026020018201604052801561147e5781602001602082028036833780820191505090505b5090506000805b6002548110156114ef5785600a60008381526020019081526020016000206001015414156114dc57808383815181106114c1576114c061400b565b5b60200260200101818152505081806114d890613f35565b9250505b80806114e790613f35565b915050611485565b50819350505050919050565b6040518060a0016040528060065481526020018281526020018481526020018581526020018381525060106000600654815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401908051906020019061157d929190612dc9565b509050506001600a600086815260200190815260200160002060080160008282546115a89190613dca565b9250508190555081600a600086815260200190815260200160002060050190805190602001906115d9929190612dc9565b50600660008154809291906115ed90613f35565b919050555050505050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060005b6004548110156116855782600e60008381526020019081526020016000206002015414156116725761166a600e600083815260200190815260200160002060010154612b9e565b9150506116bf565b808061167d90613f35565b915050611623565b506040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525090505b919050565b60106020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040180546116ff90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461172b90613ed2565b80156117785780601f1061174d57610100808354040283529160200191611778565b820191906000526020600020905b81548152906001019060200180831161175b57829003601f168201915b5050505050905085565b6040518060800160405280600454815260200184815260200183815260200182815250600e6000600454815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030190805190602001906117f4929190612dc9565b50905050600160086000858152602001908152602001600020600501600082825461181f9190613dca565b925050819055506004600081548092919061183990613f35565b9190505550505050565b83600d60008681526020019081526020016000206000018190555082600d60008681526020019081526020016000206001019080519060200190611888929190612dc9565b5081600d600086815260200190815260200160002060020190805190602001906118b3929190612dc9565b5080600d600086815260200190815260200160002060030190805190602001906118de929190612dc9565b5050505050565b60015481565b80600960008481526020019081526020016000209080519060200190611912929190612dc9565b505050565b60005b6000548110156119d457600760008281526020019081526020016000206000808201600090556001820160006119509190612e4f565b6002820160006119609190612e4f565b6003820160006119709190612e4f565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160006119a79190612e4f565b6006820160006119b79190612e4f565b6007820160009055505080806119cc90613f35565b91505061191a565b5060005b600154811015611a9357600860008281526020019081526020016000206000808201600090556001820160009055600282016000611a169190612e4f565b600382016000611a269190612e4f565b600482016000611a369190612e4f565b600582016000905560068201600090556007820160009055600882016000611a5e9190612e4f565b600982016000611a6e9190612e4f565b600a820160009055600b82016000905550508080611a8b90613f35565b9150506119d8565b5060005b600154811015611ad357600960008281526020019081526020016000206000611ac09190612e4f565b8080611acb90613f35565b915050611a97565b5060005b600254811015611b7257600a600082815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000611b1d9190612e4f565b600482016000611b2d9190612e4f565b600582016000611b3d9190612e4f565b600682016000611b4d9190612e4f565b6007820160009055600882016000905550508080611b6a90613f35565b915050611ad7565b5060005b600354811015611bc957600b600082815260200190815260200160002060008082016000611ba49190612e4f565b600182016000611bb49190612e4f565b50508080611bc190613f35565b915050611b76565b5060005b600154811015611c0957600c60008281526020019081526020016000206000611bf69190612e4f565b8080611c0190613f35565b915050611bcd565b5060005b600054811015611c7857600d6000828152602001908152602001600020600080820160009055600182016000611c439190612e4f565b600282016000611c539190612e4f565b600382016000611c639190612e4f565b50508080611c7090613f35565b915050611c0d565b5060005b600454811015611cd757600e600082815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000611cc29190612e4f565b50508080611ccf90613f35565b915050611c7c565b5060005b600554811015611d4e57600f600082815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160009055600682016000611d399190612e4f565b50508080611d4690613f35565b915050611cdb565b5060005b600654811015611db55760106000828152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055600482016000611da09190612e4f565b50508080611dad90613f35565b915050611d52565b5060008081905550600060018190555060006002819055506000600381905550600060048190555060006005819055506000600681905550565b60065481565b6008602052806000526040600020600091509050806000015490806001015490806002018054611e2490613ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5090613ed2565b8015611e9d5780601f10611e7257610100808354040283529160200191611e9d565b820191906000526020600020905b815481529060010190602001808311611e8057829003601f168201915b505050505090806003018054611eb290613ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054611ede90613ed2565b8015611f2b5780601f10611f0057610100808354040283529160200191611f2b565b820191906000526020600020905b815481529060010190602001808311611f0e57829003601f168201915b505050505090806004018054611f4090613ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6c90613ed2565b8015611fb95780601f10611f8e57610100808354040283529160200191611fb9565b820191906000526020600020905b815481529060010190602001808311611f9c57829003601f168201915b505050505090806005015490806006015490806007015490806008018054611fe090613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461200c90613ed2565b80156120595780601f1061202e57610100808354040283529160200191612059565b820191906000526020600020905b81548152906001019060200180831161203c57829003601f168201915b50505050509080600901805461206e90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461209a90613ed2565b80156120e75780601f106120bc576101008083540402835291602001916120e7565b820191906000526020600020905b8154815290600101906020018083116120ca57829003601f168201915b50505050509080600a01549080600b015490508c565b600f60205280600052604060002060009150905080600001549080600101549080600201549080600301549080600401549080600501549080600601805461214490613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461217090613ed2565b80156121bd5780601f10612192576101008083540402835291602001916121bd565b820191906000526020600020905b8154815290600101906020018083116121a057829003601f168201915b5050505050905087565b606060005b60005481101561226f5783805190602001206007600083815260200190815260200160002060020160405161220191906138cc565b6040518091039020148015612246575082805190602001206007600083815260200190815260200160002060030160405161223c91906138cc565b6040518091039020145b1561225c5761225481612b9e565b9150506122a9565b808061226790613f35565b9150506121cc565b506040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525090505b92915050565b60005481565b600a6020528060005260406000206000915090508060000154908060010154908060020154908060030180546122ea90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461231690613ed2565b80156123635780601f1061233857610100808354040283529160200191612363565b820191906000526020600020905b81548152906001019060200180831161234657829003601f168201915b50505050509080600401805461237890613ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546123a490613ed2565b80156123f15780601f106123c6576101008083540402835291602001916123f1565b820191906000526020600020905b8154815290600101906020018083116123d457829003601f168201915b50505050509080600501805461240690613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461243290613ed2565b801561247f5780601f106124545761010080835404028352916020019161247f565b820191906000526020600020905b81548152906001019060200180831161246257829003601f168201915b50505050509080600601805461249490613ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546124c090613ed2565b801561250d5780601f106124e25761010080835404028352916020019161250d565b820191906000526020600020905b8154815290600101906020018083116124f057829003601f168201915b5050505050908060070154908060080154905089565b8060076000848152602001908152602001600020600501908051906020019061254d929190612dc9565b505050565b8160076000858152602001908152602001600020600601908051906020019061257c929190612dc9565b50806007600085815260200190815260200160002060070181905550505050565b600c60205280600052604060002060009150905080546125bc90613ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546125e890613ed2565b80156126355780601f1061260a57610100808354040283529160200191612635565b820191906000526020600020905b81548152906001019060200180831161261857829003601f168201915b505050505081565b60045481565b600d60205280600052604060002060009150905080600001549080600101805461266c90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461269890613ed2565b80156126e55780601f106126ba576101008083540402835291602001916126e5565b820191906000526020600020905b8154815290600101906020018083116126c857829003601f168201915b5050505050908060020180546126fa90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461272690613ed2565b80156127735780601f1061274857610100808354040283529160200191612773565b820191906000526020600020905b81548152906001019060200180831161275657829003601f168201915b50505050509080600301805461278890613ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546127b490613ed2565b80156128015780601f106127d657610100808354040283529160200191612801565b820191906000526020600020905b8154815290600101906020018083116127e457829003601f168201915b5050505050905084565b600b60205280600052604060002060009150905080600001805461282e90613ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461285a90613ed2565b80156128a75780601f1061287c576101008083540402835291602001916128a7565b820191906000526020600020905b81548152906001019060200180831161288a57829003601f168201915b5050505050908060010180546128bc90613ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546128e890613ed2565b80156129355780601f1061290a57610100808354040283529160200191612935565b820191906000526020600020905b81548152906001019060200180831161291857829003601f168201915b5050505050905082565b600e60205280600052604060002060009150905080600001549080600101549080600201549080600301805461297490613ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546129a090613ed2565b80156129ed5780601f106129c2576101008083540402835291602001916129ed565b820191906000526020600020905b8154815290600101906020018083116129d057829003601f168201915b5050505050905084565b606060005b600054811015612a6357828051906020012060076000838152602001908152602001600020600201604051612a3191906138cc565b60405180910390201415612a5057612a4881612b9e565b915050612a9d565b8080612a5b90613f35565b9150506129fc565b506040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525090505b919050565b6060600084905060008484612ab79190613e20565b67ffffffffffffffff811115612ad057612acf61403a565b5b6040519080825280601f01601f191660200182016040528015612b025781602001600182028036833780820191505090505b50905060008590505b84811015612b9157828181518110612b2657612b2561400b565b5b602001015160f81c60f81b828783612b3e9190613e20565b81518110612b4f57612b4e61400b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080612b8990613f35565b915050612b0b565b5080925050509392505050565b606060006001612bad84612c76565b01905060008167ffffffffffffffff811115612bcc57612bcb61403a565b5b6040519080825280601f01601f191660200182016040528015612bfe5781602001600182028036833780820191505090505b509050600082602001820190505b600115612c6b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612c5557612c54613fad565b5b0494506000851415612c6657612c6b565b612c0c565b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612cd4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612cca57612cc9613fad565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612d11576d04ee2d6d415b85acef81000000008381612d0757612d06613fad565b5b0492506020810190505b662386f26fc100008310612d4057662386f26fc100008381612d3657612d35613fad565b5b0492506010810190505b6305f5e1008310612d69576305f5e1008381612d5f57612d5e613fad565b5b0492506008810190505b6127108310612d8e576127108381612d8457612d83613fad565b5b0492506004810190505b60648310612db15760648381612da757612da6613fad565b5b0492506002810190505b600a8310612dc0576001810190505b80915050919050565b828054612dd590613ed2565b90600052602060002090601f016020900481019282612df75760008555612e3e565b82601f10612e1057805160ff1916838001178555612e3e565b82800160010185558215612e3e579182015b82811115612e3d578251825591602001919060010190612e22565b5b509050612e4b9190612e8f565b5090565b508054612e5b90613ed2565b6000825580601f10612e6d5750612e8c565b601f016020900490600052602060002090810190612e8b9190612e8f565b5b50565b5b80821115612ea8576000816000905550600101612e90565b5090565b6000612ebf612eba84613d24565b613cff565b905082815260208101848484011115612edb57612eda61406e565b5b612ee6848285613e90565b509392505050565b600082601f830112612f0357612f02614069565b5b8135612f13848260208601612eac565b91505092915050565b600081359050612f2b8161408e565b92915050565b600060208284031215612f4757612f46614078565b5b600082013567ffffffffffffffff811115612f6557612f64614073565b5b612f7184828501612eee565b91505092915050565b60008060408385031215612f9157612f90614078565b5b600083013567ffffffffffffffff811115612faf57612fae614073565b5b612fbb85828601612eee565b925050602083013567ffffffffffffffff811115612fdc57612fdb614073565b5b612fe885828601612eee565b9150509250929050565b60008060006060848603121561300b5761300a614078565b5b600084013567ffffffffffffffff81111561302957613028614073565b5b61303586828701612eee565b935050602084013567ffffffffffffffff81111561305657613055614073565b5b61306286828701612eee565b925050604084013567ffffffffffffffff81111561308357613082614073565b5b61308f86828701612eee565b9150509250925092565b6000602082840312156130af576130ae614078565b5b60006130bd84828501612f1c565b91505092915050565b600080604083850312156130dd576130dc614078565b5b60006130eb85828601612f1c565b925050602083013567ffffffffffffffff81111561310c5761310b614073565b5b61311885828601612eee565b9150509250929050565b6000806000806080858703121561313c5761313b614078565b5b600061314a87828801612f1c565b945050602085013567ffffffffffffffff81111561316b5761316a614073565b5b61317787828801612eee565b935050604085013567ffffffffffffffff81111561319857613197614073565b5b6131a487828801612eee565b925050606085013567ffffffffffffffff8111156131c5576131c4614073565b5b6131d187828801612eee565b91505092959194509250565b600080600080600060a086880312156131f9576131f8614078565b5b600061320788828901612f1c565b955050602086013567ffffffffffffffff81111561322857613227614073565b5b61323488828901612eee565b945050604086013567ffffffffffffffff81111561325557613254614073565b5b61326188828901612eee565b935050606086013567ffffffffffffffff81111561328257613281614073565b5b61328e88828901612eee565b925050608061329f88828901612f1c565b9150509295509295909350565b600080600080600080600080610100898b0312156132cd576132cc614078565b5b60006132db8b828c01612f1c565b985050602089013567ffffffffffffffff8111156132fc576132fb614073565b5b6133088b828c01612eee565b975050604089013567ffffffffffffffff81111561332957613328614073565b5b6133358b828c01612eee565b965050606089013567ffffffffffffffff81111561335657613355614073565b5b6133628b828c01612eee565b95505060806133738b828c01612f1c565b94505060a06133848b828c01612f1c565b93505060c06133958b828c01612f1c565b92505060e089013567ffffffffffffffff8111156133b6576133b5614073565b5b6133c28b828c01612eee565b9150509295985092959890939650565b6000806000606084860312156133eb576133ea614078565b5b60006133f986828701612f1c565b935050602084013567ffffffffffffffff81111561341a57613419614073565b5b61342686828701612eee565b925050604061343786828701612f1c565b9150509250925092565b6000806000806080858703121561345b5761345a614078565b5b600061346987828801612f1c565b945050602085013567ffffffffffffffff81111561348a57613489614073565b5b61349687828801612eee565b93505060406134a787828801612f1c565b92505060606134b887828801612f1c565b91505092959194509250565b6000806000606084860312156134dd576134dc614078565b5b60006134eb86828701612f1c565b93505060206134fc86828701612f1c565b925050604084013567ffffffffffffffff81111561351d5761351c614073565b5b61352986828701612eee565b9150509250925092565b600080600080600080600060e0888a03121561355257613551614078565b5b60006135608a828b01612f1c565b97505060206135718a828b01612f1c565b965050604088013567ffffffffffffffff81111561359257613591614073565b5b61359e8a828b01612eee565b955050606088013567ffffffffffffffff8111156135bf576135be614073565b5b6135cb8a828b01612eee565b945050608088013567ffffffffffffffff8111156135ec576135eb614073565b5b6135f88a828b01612eee565b93505060a088013567ffffffffffffffff81111561361957613618614073565b5b6136258a828b01612eee565b92505060c06136368a828b01612f1c565b91505092959891949750929550565b6000806000806080858703121561365f5761365e614078565b5b600061366d87828801612f1c565b945050602061367e87828801612f1c565b935050604085013567ffffffffffffffff81111561369f5761369e614073565b5b6136ab87828801612eee565b92505060606136bc87828801612f1c565b91505092959194509250565b60008060008060008060c087890312156136e5576136e4614078565b5b60006136f389828a01612f1c565b965050602061370489828a01612f1c565b955050604061371589828a01612f1c565b945050606061372689828a01612f1c565b935050608061373789828a01612f1c565b92505060a087013567ffffffffffffffff81111561375857613757614073565b5b61376489828a01612eee565b9150509295509295509295565b600061377d83836138ae565b60208301905092915050565b61379281613e54565b82525050565b60006137a382613d7a565b6137ad8185613d9d565b93506137b883613d55565b8060005b838110156137e95781516137d08882613771565b97506137db83613d90565b9250506001810190506137bc565b5085935050505092915050565b6000815461380381613ed2565b61380d8186613dae565b9450600182166000811461382857600181146138395761386c565b60ff1983168652818601935061386c565b61384285613d65565b60005b8381101561386457815481890152600182019150602081019050613845565b838801955050505b50505092915050565b600061388082613d85565b61388a8185613db9565b935061389a818560208601613e9f565b6138a38161407d565b840191505092915050565b6138b781613e86565b82525050565b6138c681613e86565b82525050565b60006138d882846137f6565b915081905092915050565b60006020820190506138f86000830184613789565b92915050565b600060208201905081810360008301526139188184613798565b905092915050565b6000602082019050818103600083015261393a8184613875565b905092915050565b6000604082019050818103600083015261395c8185613875565b905081810360208301526139708184613875565b90509392505050565b600060a08201905081810360008301526139938188613875565b90506139a260208301876138bd565b81810360408301526139b48186613875565b905081810360608301526139c88185613875565b905081810360808301526139dc8184613875565b90509695505050505050565b60006020820190506139fd60008301846138bd565b92915050565b6000608082019050613a1860008301876138bd565b8181036020830152613a2a8186613875565b90508181036040830152613a3e8185613875565b90508181036060830152613a528184613875565b905095945050505050565b600061018082019050613a73600083018f6138bd565b613a80602083018e6138bd565b8181036040830152613a92818d613875565b90508181036060830152613aa6818c613875565b90508181036080830152613aba818b613875565b9050613ac960a083018a6138bd565b613ad660c08301896138bd565b613ae360e08301886138bd565b818103610100830152613af68187613875565b9050818103610120830152613b0b8186613875565b9050613b1b6101408301856138bd565b613b296101608301846138bd565b9d9c50505050505050505050505050565b6000608082019050613b4f60008301876138bd565b613b5c60208301866138bd565b613b6960408301856138bd565b8181036060830152613b7b8184613875565b905095945050505050565b600061012082019050613b9c600083018c6138bd565b613ba9602083018b6138bd565b613bb6604083018a6138bd565b8181036060830152613bc88189613875565b90508181036080830152613bdc8188613875565b905081810360a0830152613bf08187613875565b905081810360c0830152613c048186613875565b9050613c1360e08301856138bd565b613c216101008301846138bd565b9a9950505050505050505050565b600060a082019050613c4460008301886138bd565b613c5160208301876138bd565b613c5e60408301866138bd565b613c6b60608301856138bd565b8181036080830152613c7d8184613875565b90509695505050505050565b600060e082019050613c9e600083018a6138bd565b613cab60208301896138bd565b613cb860408301886138bd565b613cc560608301876138bd565b613cd260808301866138bd565b613cdf60a08301856138bd565b81810360c0830152613cf18184613875565b905098975050505050505050565b6000613d09613d1a565b9050613d158282613f04565b919050565b6000604051905090565b600067ffffffffffffffff821115613d3f57613d3e61403a565b5b613d488261407d565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613dd582613e86565b9150613de083613e86565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e1557613e14613f7e565b5b828201905092915050565b6000613e2b82613e86565b9150613e3683613e86565b925082821015613e4957613e48613f7e565b5b828203905092915050565b6000613e5f82613e66565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613ebd578082015181840152602081019050613ea2565b83811115613ecc576000848401525b50505050565b60006002820490506001821680613eea57607f821691505b60208210811415613efe57613efd613fdc565b5b50919050565b613f0d8261407d565b810181811067ffffffffffffffff82111715613f2c57613f2b61403a565b5b80604052505050565b6000613f4082613e86565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f7357613f72613f7e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61409781613e86565b81146140a257600080fd5b5056fe68747470733a2f2f692e706f7374696d672e63632f537378477735635a2f706572736f6e2e6a7067a26469706673582212208270e6654a04248004a4a6bfb2d5727addfd305a3b7aa16a4f29388c83524b8764736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_categoryMap(uint256)": {
        "notice": "The map of all the Survey Category ."
      },
      "_completedsurveyMap(uint256)": {
        "notice": "The map of all the Completed Surveys."
      },
      "_fhirMap(uint256)": {
        "notice": "The map of all the FHIR information."
      },
      "_ongoingMap(uint256)": {
        "notice": "The map of all the OnGoing Trials."
      },
      "_questionanswerdMap(uint256)": {
        "notice": "The map of all the Question Answerd in a Survey."
      },
      "_sectionsMap(uint256)": {
        "notice": "The map of all the Survey Sections  ."
      },
      "_surveyMap(uint256)": {
        "notice": "The map of all the Surveys information."
      },
      "_trialAudienceMap(uint256)": {
        "notice": "The map of all the Rewards information."
      },
      "_trialMap(uint256)": {
        "notice": "The map of all the Trials information."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1189,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_UserIds",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1191,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_TrialIds",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1193,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_SurveyIds",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1195,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_SurveyCategoryIds",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1197,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_OngoingIds",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1199,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_AnsweredIds",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1201,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_CompletedSurveyIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1207,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_userMap",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(user_struct)1067_storage)"
      },
      {
        "astId": 1213,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_trialMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(trial_struct)1111_storage)"
      },
      {
        "astId": 1218,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_trialAudienceMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1224,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_surveyMap",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(survey_struct)1139_storage)"
      },
      {
        "astId": 1230,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_categoryMap",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(survey_category_struct)1074_storage)"
      },
      {
        "astId": 1235,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_sectionsMap",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1241,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_fhirMap",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(fhir_struct)1152_storage)"
      },
      {
        "astId": 1247,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_ongoingMap",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(ongoing_struct)1161_storage)"
      },
      {
        "astId": 1253,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_questionanswerdMap",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(survey_question_answer_struct)1176_storage)"
      },
      {
        "astId": 1259,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_completedsurveyMap",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(completed_survey_struct)1187_storage)"
      },
      {
        "astId": 1261,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "owner",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(completed_survey_struct)1187_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.completed_survey_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(completed_survey_struct)1187_storage"
      },
      "t_mapping(t_uint256,t_struct(fhir_struct)1152_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.fhir_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(fhir_struct)1152_storage"
      },
      "t_mapping(t_uint256,t_struct(ongoing_struct)1161_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.ongoing_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ongoing_struct)1161_storage"
      },
      "t_mapping(t_uint256,t_struct(survey_category_struct)1074_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.survey_category_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(survey_category_struct)1074_storage"
      },
      "t_mapping(t_uint256,t_struct(survey_question_answer_struct)1176_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.survey_question_answer_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(survey_question_answer_struct)1176_storage"
      },
      "t_mapping(t_uint256,t_struct(survey_struct)1139_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.survey_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(survey_struct)1139_storage"
      },
      "t_mapping(t_uint256,t_struct(trial_struct)1111_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.trial_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(trial_struct)1111_storage"
      },
      "t_mapping(t_uint256,t_struct(user_struct)1067_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.user_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(user_struct)1067_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(completed_survey_struct)1187_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.completed_survey_struct",
        "members": [
          {
            "astId": 1178,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "completed_survey_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1180,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1182,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1184,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "survey_id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1186,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "date",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(fhir_struct)1152_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.fhir_struct",
        "members": [
          {
            "astId": 1142,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1145,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "given_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1148,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "identifier",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1151,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "patient_id",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ongoing_struct)1161_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.ongoing_struct",
        "members": [
          {
            "astId": 1154,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "ongoing_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1156,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1158,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1160,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "date",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(survey_category_struct)1074_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.survey_category_struct",
        "members": [
          {
            "astId": 1070,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1073,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(survey_question_answer_struct)1176_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.survey_question_answer_struct",
        "members": [
          {
            "astId": 1163,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "answer_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1165,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1167,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1169,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "survey_id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1171,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "section_id",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1173,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "question_id",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1175,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "answer",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(survey_struct)1139_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.survey_struct",
        "members": [
          {
            "astId": 1114,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "survey_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1117,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1120,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1123,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1126,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1129,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "date",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1132,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1135,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "reward",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1138,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "submission",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(trial_struct)1111_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.trial_struct",
        "members": [
          {
            "astId": 1077,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1080,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1083,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1086,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "title",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1089,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1092,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "contributors",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1095,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "audience",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1098,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "budget",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1101,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "date",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 1104,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "reward_type",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 1107,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "reward_price",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1110,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "total_spending_limit",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(user_struct)1067_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.user_struct",
        "members": [
          {
            "astId": 1045,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1048,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1051,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1054,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "password",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1057,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "walletaddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1060,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "privatekey",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1063,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1066,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "credits",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}